/*
 * Clever API
 * The Clever API
 *
 * OpenAPI spec version: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.CourseResponse;
import io.swagger.client.model.CoursesResponse;
import io.swagger.client.model.DistrictResponse;
import io.swagger.client.model.DistrictsResponse;
import io.swagger.client.model.NotFound;
import io.swagger.client.model.ResourceResponse;
import io.swagger.client.model.ResourcesResponse;
import io.swagger.client.model.SchoolResponse;
import io.swagger.client.model.SchoolsResponse;
import io.swagger.client.model.SectionResponse;
import io.swagger.client.model.SectionsResponse;
import io.swagger.client.model.TermResponse;
import io.swagger.client.model.TermsResponse;
import io.swagger.client.model.UserResponse;
import io.swagger.client.model.UsersResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataApi
 */
@Ignore
public class DataApiTest {

    private final DataApi api = new DataApi();

    
    /**
     * 
     *
     * Returns the contact users for a student user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsForUserTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        UsersResponse response = api.getContactsForUser(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a specific course
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCourseTest() throws ApiException {
        String id = null;
        CourseResponse response = api.getCourse(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the course for a section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCourseForSectionTest() throws ApiException {
        String id = null;
        CourseResponse response = api.getCourseForSection(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of courses
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCoursesTest() throws ApiException {
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        String count = null;
        CoursesResponse response = api.getCourses(limit, startingAfter, endingBefore, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the courses for a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCoursesForResourceTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        CoursesResponse response = api.getCoursesForResource(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the courses for a school
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCoursesForSchoolTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        CoursesResponse response = api.getCoursesForSchool(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a specific district
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistrictTest() throws ApiException {
        String id = null;
        DistrictResponse response = api.getDistrict(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the district for a course
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistrictForCourseTest() throws ApiException {
        String id = null;
        DistrictResponse response = api.getDistrictForCourse(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the district for a school
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistrictForSchoolTest() throws ApiException {
        String id = null;
        DistrictResponse response = api.getDistrictForSchool(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the district for a section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistrictForSectionTest() throws ApiException {
        String id = null;
        DistrictResponse response = api.getDistrictForSection(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the district for a term
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistrictForTermTest() throws ApiException {
        String id = null;
        DistrictResponse response = api.getDistrictForTerm(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the district for a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistrictForUserTest() throws ApiException {
        String id = null;
        DistrictResponse response = api.getDistrictForUser(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of districts
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDistrictsTest() throws ApiException {
        String count = null;
        DistrictsResponse response = api.getDistricts(count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a specific resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourceTest() throws ApiException {
        String id = null;
        ResourceResponse response = api.getResource(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of resources
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourcesTest() throws ApiException {
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        ResourcesResponse response = api.getResources(limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the resources for a course
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourcesForCourseTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        ResourcesResponse response = api.getResourcesForCourse(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the resources for a section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourcesForSectionTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        ResourcesResponse response = api.getResourcesForSection(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the resources for a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResourcesForUserTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        ResourcesResponse response = api.getResourcesForUser(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a specific school
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchoolTest() throws ApiException {
        String id = null;
        SchoolResponse response = api.getSchool(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the school for a section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchoolForSectionTest() throws ApiException {
        String id = null;
        SchoolResponse response = api.getSchoolForSection(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of schools
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchoolsTest() throws ApiException {
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        String count = null;
        SchoolsResponse response = api.getSchools(limit, startingAfter, endingBefore, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the schools for a course
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchoolsForCourseTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SchoolsResponse response = api.getSchoolsForCourse(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the schools for a term
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchoolsForTermTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SchoolsResponse response = api.getSchoolsForTerm(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the schools for a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSchoolsForUserTest() throws ApiException {
        String id = null;
        String primary = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SchoolsResponse response = api.getSchoolsForUser(id, primary, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a specific section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionTest() throws ApiException {
        String id = null;
        SectionResponse response = api.getSection(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of sections
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsTest() throws ApiException {
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        String count = null;
        SectionsResponse response = api.getSections(limit, startingAfter, endingBefore, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the sections for a course
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsForCourseTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SectionsResponse response = api.getSectionsForCourse(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the sections for a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsForResourceTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SectionsResponse response = api.getSectionsForResource(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the sections for a school
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsForSchoolTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SectionsResponse response = api.getSectionsForSchool(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the sections for a term
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsForTermTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SectionsResponse response = api.getSectionsForTerm(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the sections for a user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSectionsForUserTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        SectionsResponse response = api.getSectionsForUser(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the student users for a teacher or contact user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStudentsForUserTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        UsersResponse response = api.getStudentsForUser(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the teacher users for a student user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTeachersForUserTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        UsersResponse response = api.getTeachersForUser(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a specific term
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTermTest() throws ApiException {
        String id = null;
        TermResponse response = api.getTerm(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the term for a section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTermForSectionTest() throws ApiException {
        String id = null;
        TermResponse response = api.getTermForSection(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of terms
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTermsTest() throws ApiException {
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        String count = null;
        TermsResponse response = api.getTerms(limit, startingAfter, endingBefore, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the terms for a school
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTermsForSchoolTest() throws ApiException {
        String id = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        TermsResponse response = api.getTermsForSchool(id, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a specific user
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String id = null;
        UserResponse response = api.getUser(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of contact, district admin, staff, student, and/or teacher users
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        Integer limit = null;
        String role = null;
        String startingAfter = null;
        String endingBefore = null;
        String count = null;
        UsersResponse response = api.getUsers(limit, role, startingAfter, endingBefore, count);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the student and/or teacher users for a resource
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersForResourceTest() throws ApiException {
        String id = null;
        String role = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        UsersResponse response = api.getUsersForResource(id, role, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the staff, student, and/or teacher users for a school
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersForSchoolTest() throws ApiException {
        String id = null;
        String role = null;
        String primary = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        UsersResponse response = api.getUsersForSchool(id, role, primary, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the student and/or teacher users for a section
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUsersForSectionTest() throws ApiException {
        String id = null;
        String role = null;
        Integer limit = null;
        String startingAfter = null;
        String endingBefore = null;
        UsersResponse response = api.getUsersForSection(id, role, limit, startingAfter, endingBefore);

        // TODO: test validations
    }
    
}
